;; functions for working with annotated gcode generated by slic3r

(defconst slic3r-gcode/layer-regexp ".*move to next layer (\\([0-9]+\\))$")
(defconst slic3r-gcode/)

(defun slic3r-gcode/current-layer ()
  (save-excursion
    (when (re-search-backward slic3r-gcode/layer-regexp nil t)
      (string-to-number (match-string 1)))))

(defun slic3r-gcode/current-feedrate()
  (save-excursion
    (when (re-search-backward "G1 F\\([0-9]+\\)" nil t)
      (string-to-number (match-string 1)))))

(defun slic3r-gcode/previous-layer ()
  "Move point to beginning of previous layer."
  (interactive)
  (when (re-search-backward slic3r-gcode/layer-regexp nil t)
    (beginning-of-line)
    (string-to-number (match-string 1))))

(defun slic3r-gcode/next-layer ()
  "Move point to beginning of next layer"
  (interactive)
  (when (re-search-forward slic3r-gcode/layer-regexp nil t)
    (beginning-of-line 2)
    (string-to-number (match-string 1))))

(let (line-data)
  (defun slic3r-gcode/parse-line ()
    (when (string-match (rx (group (1+ anything))
                            (group (1+ anything))
                            eol))
      (let ((code (match-string 1))
            (comment (match-string 2)))
        (when string-match (rx (group (: (or "G" "M") (1+ digit)))))))
(defun slic3r-gcode/looking-at-move (type)
  "Call 'looking-at' with commented line typically produced by slic3r output"
  (looking-at (format ".*; %s$" type)))

(defun slic3r-gcode/looking-at-gcode (code)
  "Call 'looking-at")

(defun slic3r-gcode/analyze ()
  "Analyze buffer (WIP)"
  (save-excursion
    (goto-char (point-min))
    (loop with preamble-t = t
          for move-type
          for layer
          for line from 1
          do (progn
               (when (looking-at slic3r-gcode/layer-regexp)
                 (setq preamble-t nil
                       move-type 'layer-change
                       layer match-string 1))
               (when (slic3r-gcode/looking-at-move "perimeter")
                 (setq move-type 'perimeter))
               (when (slic3r-gcode/looking-at-move "skirt")
                 (setq move-type 'skirt))
               (when (slic3r-gcode/looking-at-move "infill")
                 (setq move-type 'infill))
               (when (looking-at ))))))

(define-derived-mode slic3r-gcode-mode nil "Slic3r-Gcode"
  (setq header-line-format
        '(:eval (format "Current Layer: %s %s"
                        (or (slic3r-gcode/current-layer) "Preamble")
                        (let ((fr (slic3r-gcode/current-feedrate)))
                          (if fr (format "F%s" fr) "")))))
  (define-key slic3r-gcode-mode-map (kbd "C-j") 'slic3r-gcode/next-layer)
  (define-key slic3r-gcode-mode-map (kbd "C-k") 'slic3r-gcode/previous-layer))
